package com.moranbw.masquito.common;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.moranbw.masquito.leaseservice.Lease;

import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;

public class ReaderWriterUtil {

    public static Map<String, Collection<String>> readDnsMasqConf(String aConfPath) throws IOException {
        MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();
        BufferedReader reader = new BufferedReader(new FileReader(aConfPath));
        String line;
        while ((line = reader.readLine()) != null) {
            String content = line.trim();
            if (content.length() > 0) {
                if (content.charAt(0) != '#') {
                    String[] splitString = content.split("=");
                    if (splitString.length > 1) {
                        map.put(splitString[0], splitString[1]);
                    } else {
                        map.put(splitString[0], null);
                    }
                }
            }
        }
        reader.close();

        return map.asMap();
    }

    public static void writeDnsMasqConf(String aConfPath, Map<String, Collection<String>> aDnsMasqConfMap)
            throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(aConfPath));
        writer.write("# Configuration generated by masquito");
        writer.newLine();

        List<String> keylist = new ArrayList<>(aDnsMasqConfMap.keySet());
        Collections.sort(keylist);
        for (String key : keylist) {
            Iterator<String> iterator = aDnsMasqConfMap.get(key).iterator();
            while (iterator.hasNext()) {
                String nextValue = iterator.next();
                if (nextValue != null) {
                    writer.write(key + "=" + nextValue);
                } else {
                    writer.write(key);
                }
                writer.newLine();
            }
        }
        writer.close();
    }

    public static ArrayList<Lease> readDHCPLeases(String aLeasePath) throws IOException {
        ArrayList<Lease> list = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new FileReader(aLeasePath));
        String line;
        while ((line = reader.readLine()) != null) {
            String content = line.trim();
            String[] splitString = content.split(" ");
            Lease lease = new Lease();
            lease.setLeaseExpiry(new Date(Long.parseLong(splitString[0]) * 1000));
            lease.setMacAddress(splitString[1]);
            lease.setIpAddress(splitString[2]);
            lease.setHostName(splitString[3]);
            lease.setClientId(splitString[4]);
            list.add(lease);
        }
        reader.close();
        return list;
    }

    public static void writeDHCPLeases(String aLeasePath, ArrayList<Lease> aLeases) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(aLeasePath));
        for (Lease lease : aLeases) {
            writer.write((lease.getLeaseExpiry().getTime() / 1000) + " ");
            writer.write(lease.getMacAddress() + " ");
            writer.write(lease.getIpAddress() + " ");
            writer.write(lease.getHostName() + " ");
            writer.write(lease.getClientId());
            writer.newLine();
        }
        writer.close();
    }
}
